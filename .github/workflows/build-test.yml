name: Build and Test

# DÃ©clenchÃ© sur chaque push et pull request
on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      # Service PostgreSQL pour les tests
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-flask pytest-cov flake8 black

    - name: Lint with flake8
      run: |
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check code formatting with black
      run: |
        black --check app/ || echo "Code formatting check completed"

    - name: Create tests directory and files
      run: |
        mkdir -p tests
        cat > tests/test_main.py << 'EOF'
import pytest
from app.main import app

@pytest.fixture
def client():
    app.config['TESTING'] = True
    with app.test_client() as client:
        yield client

def test_get_books(client):
    response = client.get('/books')
    assert response.status_code == 200
    assert response.is_json
    data = response.get_json()
    assert isinstance(data, dict)

def test_get_book_by_id(client):
    response = client.get('/books/1')
    assert response.status_code == 200
    assert response.is_json
    data = response.get_json()
    assert 'title' in data
    assert 'author' in data
    assert 'year' in data

def test_get_book_not_found(client):
    response = client.get('/books/999')
    assert response.status_code == 404
EOF

    - name: Run tests with pytest
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        FLASK_ENV: testing
      run: |
        pytest tests/ --cov=app --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true

  build-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image (test only)
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: myapp:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run -d --name test-container -p 5000:5000 myapp:test
        sleep 10
        curl -f http://localhost:5000/books || (docker logs test-container && exit 1)
        docker stop test-container
        docker rm test-container
